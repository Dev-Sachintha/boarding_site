
CREATE DATABASE IF NOT EXISTS uniboard_db;
USE uniboard_db;

SET FOREIGN_KEY_CHECKS=0; -- Disable temporarily for easier table creation order

DROP TABLE IF EXISTS `reviews`;
DROP TABLE IF EXISTS `listing_images`;
DROP TABLE IF EXISTS `listings`;
DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `name` VARCHAR(100) NOT NULL,
  `email` VARCHAR(100) NOT NULL UNIQUE,
  `password_hash` VARCHAR(255) NOT NULL,
  `role` ENUM('student', 'landlord', 'admin') NOT NULL DEFAULT 'student',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE `listings` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `user_id` INT NOT NULL, -- Foreign key to users table (the landlord)
  `title` VARCHAR(255) NOT NULL,
  `description` TEXT,
  `location` VARCHAR(255) COMMENT 'Full address string',
  `city` VARCHAR(100),
  -- `latitude` DECIMAL(10, 8) NULL,
  -- `longitude` DECIMAL(11, 8) NULL,
  `price` DECIMAL(10, 2) NOT NULL,
  `gender_preference` ENUM('male', 'female', 'mixed', 'any') DEFAULT 'any',
  `amenities` TEXT COMMENT 'Comma-separated values: wifi,meals,laundry',
  `primary_image_url` VARCHAR(255) NULL COMMENT 'Path to the primary image',
  `status` ENUM('pending', 'available', 'unavailable', 'rejected') DEFAULT 'pending' COMMENT 'available was approved',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- CREATE TABLE `listing_images` (
--   `id` INT AUTO_INCREMENT PRIMARY KEY,
--   `listing_id` INT NOT NULL,
--   `image_url` VARCHAR(255) NOT NULL,
--   `is_primary` BOOLEAN DEFAULT FALSE,
--   `uploaded_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--   FOREIGN KEY (`listing_id`) REFERENCES `listings`(`id`) ON DELETE CASCADE
-- ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
-- Commented out for simplicity for now, using primary_image_url in listings table

CREATE TABLE `reviews` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `listing_id` INT NOT NULL,
  `user_id` INT NOT NULL, -- Foreign key to users table (the reviewer)
  `rating` TINYINT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  `comment` TEXT,
  `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`listing_id`) REFERENCES `listings`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- CREATE TABLE `favorites` (
--   `user_id` INT NOT NULL,
--   `listing_id` INT NOT NULL,
--   `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--   PRIMARY KEY (`user_id`, `listing_id`),
--   FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE,
--   FOREIGN KEY (`listing_id`) REFERENCES `listings`(`id`) ON DELETE CASCADE
-- ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
-- Commented out, implement if favorites feature is built

SET FOREIGN_KEY_CHECKS=1; -- Re-enable

-- Sample Admin User (password: admin123)
-- HASH: $2y$10$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (Generate your own)
-- To generate a hash in PHP: echo password_hash("admin123", PASSWORD_DEFAULT);
INSERT INTO `users` (`name`, `email`, `password_hash`, `role`) VALUES
('Admin User', 'admin@uniboard.example.com', '$2y$10$E0A.R5l2sQ6w8xY9zC3B.uG0jZ4kL5mN7oP8qR9sT0uV1wX2yZ3e', 'admin');
-- The hash above is for "admin123"

-- Sample Landlord User (password: landlord123)
INSERT INTO `users` (`name`, `email`, `password_hash`, `role`) VALUES
('Test Landlord', 'landlord@uniboard.example.com', '$2y$10$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'landlord');
-- Replace xxxxx with actual hash for "landlord123"

-- Sample Student User (password: student123)
INSERT INTO `users` (`name`, `email`, `password_hash`, `role`) VALUES
('Test Student', 'student@uniboard.example.com', '$2y$10$yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy', 'student');
-- Replace yyyyy with actual hash for "student123"